import os
import io
import base64
import datetime
import sqlite3
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from PIL import Image
from openai import OpenAI

from referral import (
    init_referral_db,
    process_referral,
    get_bonus_quota,
    get_referral_stats,
    get_referral_link
)

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

client = OpenAI()
DB_PATH = "meals.db"
WHITELIST = [411134984, 930120924, 242606188, 638538033]
MAX_REQUESTS_PER_DAY = 5


def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É meals —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    cursor.execute("""CREATE TABLE IF NOT EXISTS meals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        date TEXT,
        calories INTEGER,
        proteins INTEGER,
        fats INTEGER,
        carbs INTEGER,
        description TEXT,
        assessment TEXT
    )""")

    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–µ–∑ –Ω–∏—Ö
    try:
        cursor.execute("ALTER TABLE meals ADD COLUMN description TEXT")
    except sqlite3.OperationalError:
        pass

    try:
        cursor.execute("ALTER TABLE meals ADD COLUMN assessment TEXT")
    except sqlite3.OperationalError:
        pass

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""CREATE TABLE IF NOT EXISTS usage_log (
        user_id INTEGER,
        date TEXT,
        count INTEGER,
        PRIMARY KEY (user_id, date)
    )""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS daily_limit (
        user_id INTEGER PRIMARY KEY,
        calorie_limit INTEGER
    )""")

    conn.commit()
    conn.close()


def encode_for_openai(image_bytes: bytes) -> str:
    img = Image.open(io.BytesIO(image_bytes)).convert("RGB")
    buffer = io.BytesIO()
    img.save(buffer, format="JPEG")
    b64 = base64.b64encode(buffer.getvalue()).decode("utf-8")
    return f"data:image/jpeg;base64,{b64}"

# üì∏ –§–æ—Ç–æ ‚Üí OpenAI ‚Üí –ú–∞–∫—Ä–æ—Å—ã
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    date = datetime.date.today().isoformat()
    photo = await update.message.photo[-1].get_file()
    image_bytes = await photo.download_as_bytearray()
    image_url = encode_for_openai(image_bytes)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –õ–∏–º–∏—Ç—ã
    if user_id not in WHITELIST:
        cursor.execute("SELECT count FROM usage_log WHERE user_id=? AND date=?", (user_id, date))
        row = cursor.fetchone()
        used = row[0] if row else 0
        extra_limit = get_bonus_quota(user_id)
        daily_limit = MAX_REQUESTS_PER_DAY + extra_limit

        if used >= daily_limit:
            await update.message.reply_text("‚õîÔ∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±–æ–Ω—É—Å–æ–≤!")
            conn.close()
            return

    # ‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    response = client.responses.create(
        model="gpt-4.1",
        input=[{
            "role": "user",
            "content": [
                {
                    "type": "input_text",
                    "text": (
                        "–¢—ã ‚Äî –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –≤—ã–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—É—é –Ω—É—Ç—Ä–∏–µ–Ω—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É. "
                        "–û—Ü–µ–Ω–∏:\n"
                        "1. –ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)\n"
                        "2. –ë–µ–ª–∫–∏ (–≥)\n"
                        "3. –ñ–∏—Ä—ã (–≥)\n"
                        "4. –£–≥–ª–µ–≤–æ–¥—ã (–≥)\n\n"
                        "‚ö†Ô∏è –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n"
                        "–ö–∞–ª–æ—Ä–∏–∏: ..., –ë–µ–ª–∫–∏: ..., –ñ–∏—Ä—ã: ..., –£–≥–ª–µ–≤–æ–¥—ã: ...\n\n"
                        "–ó–∞—Ç–µ–º:\n"
                        "- –û–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –±–ª—é–¥–æ (—á—Ç–æ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ)\n"
                        "- –û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–∫–∞–∂–∏ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∫–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É "
                        "–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –∏ –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä–∞—Ç—å—Å—è –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è."
                    )
                },
                {"type": "input_image", "image_url": image_url}
            ]
        }]
    )

    import re

    # –†–∞–∑–¥–µ–ª–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = response.output_text.strip().splitlines()

    # –ù–∞–π–¥—ë–º –º–∞–∫—Ä–æ—Å—ã
    values = re.findall(r'\d+', response.output_text)
    calories = int(values[0]) if len(values) > 0 else 0
    proteins = int(values[1]) if len(values) > 1 else 0
    fats = int(values[2]) if len(values) > 2 else 0
    carbs = int(values[3]) if len(values) > 3 else 0

    # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–ª—é—Å—ã/–º–∏–Ω—É—Å—ã
    description = next((l for l in lines if not re.search(r'\d+', l) and "–ö–∞–ª–æ—Ä–∏–∏" not in l), "")
    comment = lines[-1] if len(lines) > 1 else ""

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if user_id not in WHITELIST:
        if row:
            cursor.execute("UPDATE usage_log SET count=count+1 WHERE user_id=? AND date=?", (user_id, date))
        else:
            cursor.execute("INSERT INTO usage_log (user_id, date, count) VALUES (?, ?, 1)", (user_id, date))
        conn.commit()

    conn.close()

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    callback_data = f"save:{user_id}:{calories}:{proteins}:{fats}:{carbs}"
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å", callback_data=callback_data)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    reply_text = (
        f"üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {calories} kcal\n"
        f"üí™ –ë–µ–ª–∫–∏: {proteins} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fats} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
        f"üìù –ë–ª—é–¥–æ: {description}\n"
        f"‚öñÔ∏è –û—Ü–µ–Ω–∫–∞: {comment}"
    )

    await update.message.reply_text(reply_text, reply_markup=reply_markup)



async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("save:"):
        parts = query.data.split(":")
        user_id = int(parts[1])
        cal, prot, fat, carb = map(int, parts[2:6])
        desc = parts[6] if len(parts) > 6 else ""
        assess = parts[7] if len(parts) > 7 else ""
        date = datetime.date.today().isoformat()

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        cursor.execute("""INSERT INTO meals (
            user_id, date, calories, proteins, fats, carbs, description, assessment
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                       (user_id, date, cal, prot, fat, carb, desc, assess))

        conn.commit()

        # –û—Å—Ç–∞—Ç–æ–∫ –¥–æ –ª–∏–º–∏—Ç–∞
        cursor.execute("SELECT SUM(calories) FROM meals WHERE user_id=? AND date=?", (user_id, date))
        total_today = cursor.fetchone()[0] or 0
        cursor.execute("SELECT calorie_limit FROM daily_limit WHERE user_id=?", (user_id,))
        limit_row = cursor.fetchone()
        conn.close()

        if limit_row:
            daily_limit = limit_row[0]
            remaining = max(0, daily_limit - total_today)
            await query.edit_message_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {cal} kcal ({date})\n"
                f"‚è≥ –î–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining} kcal"
            )
        else:
            await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {cal} kcal ({date})")


# üß≠ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é + –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    start_param = context.args[0] if context.args else None

    process_referral(user_id, start_param)

    keyboard = [["üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"], ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –¥–Ω–∏"], ["üéØ –£–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç"], ["üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Ç—ã –ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–≥–æ –±–ª—é–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=reply_markup)

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–º–∏—Ç
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    if text == "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è":
        today = datetime.date.today().isoformat()
        cursor.execute("SELECT SUM(calories) FROM meals WHERE user_id=? AND date=?", (user_id, today))
        total = cursor.fetchone()[0] or 0
        await update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {total} kcal")

    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –¥–Ω–∏":
        cursor.execute("SELECT date, SUM(calories) FROM meals WHERE user_id=? GROUP BY date ORDER BY date DESC", (user_id,))
        rows = cursor.fetchall()
        report = "\n".join([f"{date}: {cal} kcal" for date, cal in rows]) or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        await update.message.reply_text(f"üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:\n\n{report}")

    elif text == "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã":
        bot_username = context.bot.username
        ref_link = get_referral_link(bot_username, user_id)
        invited = get_referral_stats(user_id)
        remaining = max(0, 5 - invited)

        await update.message.reply_text(
            f"üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {invited} –¥—Ä—É–∑–µ–π\n"
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –¥–æ –±–æ–Ω—É—Å–∞\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            "–ü—Ä–∏–≤–µ–¥–∏ 5 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ 150 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!"
        )

    elif text == "üéØ –£–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç":
        context.user_data["awaiting_limit"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ). –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ 0.")
        return

    elif context.user_data.get("awaiting_limit"):
        if not text.isdigit():
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–∂–∞–≤ ¬´üéØ –£–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç¬ª.")
            context.user_data["awaiting_limit"] = False
            return

        limit = int(text)
        if limit == 0:
            cursor.execute("DELETE FROM daily_limit WHERE user_id=?", (user_id,))
            await update.message.reply_text("üõë –õ–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π –æ—Ç–∫–ª—é—á—ë–Ω.")
        else:
            cursor.execute("REPLACE INTO daily_limit (user_id, calorie_limit) VALUES (?, ?)", (user_id, limit))
            await update.message.reply_text(f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} kcal")

        conn.commit()
        context.user_data["awaiting_limit"] = False
        conn.close()
        return

    conn.close()

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    init_db()
    init_referral_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    app.run_polling()
